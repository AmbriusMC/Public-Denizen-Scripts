Class_Commands:
  type: command
  debug: true
  name: Class
  usage: /Class (Choose)
  description: The various class commands.
  permission: class
  permission message: <&7>Sorry, <&6><player.name><&7>. You cannot use this command because you do not have the permission <&f>'<permission>'<&7>!
  script:
  - if <player.gamemode.id> != 2 {
    - narrate "<&a><&l>[Class] <&7>You must be in <&f>Adventure Mode <&7>to use this command!"
    - queue clear
  }
  - if <context.args.size> == 0 {
    - inventory open d:in@Class_Select_Menu
    - queue clear
  }
  else if <context.args.size> == 1 {
    - if <context.args.get[1]> == skills && <yaml[<player.uuid>].read[General.Class]> != Citizen {
      - inject Skill_Bar_Setup
      - inventory open d:in@<yaml[<player.uuid>].read[General.Class]>_Skills_Menu
      - queue clear
    }
    else if <yaml[<player.uuid>].read[General.Class]> == Citizen {
      - narrate "<&a><&l>[Class] <&7>You currently do not have any class set!"
      - queue clear
    }
    else {
     - narrate "<&a><&l>[Class] <&7>Invalid command."
     - queue clear
    }
  }
  else if <context.args.size> == 2 && <context.args.get[1]> == admin {
    - if !<player.is_op> {
      - narrate "<&a><&l>[Class] <&7>You must be an administrator to use this command!"
      - queue clear
    }
    - if <context.args.get[2]> == cooldown && <yaml[<player.uuid>].contains[<yaml[<player.uuid>].read[General.Class]>.Skill_Bar.Skills]> {
      - foreach <yaml[<player.uuid>].read[<yaml[<player.uuid>].read[General.Class]>.Skill_Bar.Skills]> {
        - define Skill <def[value].scriptname>_Cooldown
        - if <player.has_flag[<def[Skill]>]> {
          - flag player <def[Skill]>:!
        }
      }
      - run Skill_Bar_Setup
      - narrate "<&a><&l>[Class] <&7>Your cooldowns have been reset!"
      - queue clear
    }
  }
  else if <context.args.size> == 3 && <context.args.get[1]> == admin {
    - if !<player.is_op> {
      - narrate "<&a><&l>[Class] <&7>You must be an administrator to use this command!"
      - queue clear
    }
    - if <context.args.get[2]> == cooldown && <yaml[<player.uuid>].contains[<yaml[<player.uuid>].read[General.Class]>.Skill_Bar.Skills]> {
      - define Player p@<context.args.get[3]>
      - if !<def[Player].is_online> {
        - narrate "<&a><&l>[Class] <&f><def[Player].name> is not online!"
        - queue clear
      }
      - foreach <yaml[<def[Player].uuid>].read[<def[Player].flag[Class]>.Skill_Bar.Skills]> {
        - define Skill <def[value].scriptname>_Cooldown
        - if <def[Player].has_flag[<def[Skill]>]> {
          - flag p@<def[Player]> <def[Skill]>:!
        }
      }
      - run Skill_Bar_Setup player:<def[Player]>
      - narrate "<&a><&l>[Class] <&7>Your cooldowns have been reset!"
      - queue clear
    }
  }

Cast_Command:
  type: command
  debug: false
  name: Cast
  description: 
  permission: class.cast
  permission message: <&7>Sorry, <&6><player.name><&7>. You cannot use this command because you do not have the permission <&f>'<permission>'<&7>!
  script:
  - if <context.args.size> == 0 {
    - narrate "<&a><&l>[Skill] <&7>You must specify a skill!"
    - queue clear
  }
  else if <context.args.size> == 1 {
    - if <context.args.get[1]>_Cast matches script {
      - define Skill <context.args.get[1].to_titlecase>
      - define Skill_Slot <player.inventory.find[<def[Skill].to_uppercase>]>
      - inject Cast_Sequence
    }
    else {
      - narrate "<&a><&l>[Skill] <&7>This skill does not exist!"
    }
  }

Class_Select_Menu:
  type: Inventory
  debug: true
  inventory: HOPPER
  title: <&6><&l>Select a class<&co>
  slots:
  - "[i@Berserker_Icon] [i@Saboteur_Icon] [] [] [i@Exit_Icon]"

Class_Select_Menu_Handler:
  type: world
  debug: true
  events:
    on player clicks in Class_Select_Menu:
    - determine cancelled
    on player drags in Class_Select_Menu:
    - determine cancelled
    on player clicks Berserker_Icon in Class_Select_Menu:
    - inventory close
    - yaml id:<player.uuid> set General.Class:Berserker
    - inject Skill_Bar_Setup
    - adjust <player> max_health:<s@Berserker_Stat_Config.yaml_key[Health].as_int||150>
    - adjust <player> scale_health:true
    - adjust <player> health:<player.health.max>
    - title "subtitle:<&6>You have become a <&c>Berserker<&6>!"
    on player clicks Saboteur_Icon in Class_Select_Menu:
    - inventory close
    - yaml id:<player.uuid> set General.Class:Saboteur
    - inject Skill_Bar_Setup
    - adjust <player> max_health:<s@Saboteur_Stat_Config.yaml_key[Health].as_int||150>
    - adjust <player> scale_health:true
    - adjust <player> health:<player.health.max>
    - title "subtitle:<&6>You have become a <&c>Saboteur<&6>!"
    on player clicks Exit_Icon in Class_Select_Menu:
    - inventory close

Berserker_Icon:
  type: item
  debug: false
  material: iron_axe
  display name: <&c>Berserker
  lore:
  - <&a>Click here to become a berserker!

Saboteur_Icon:
  type: item
  debug: false
  material: firework_charge
  display name: <&c>Saboteur
  lore:
  - <&a>Click here to become a Saboteur!