Selection_Process:
  type: task
  debug: false
  speed: 0
  script:
    - if <player.has_flag[<context.item.scriptname>_Cooldown]> {
      - narrate "<&a><&l>[Class] <&7>That skill is on cooldown for another <&f><player.flag[<context.item.scriptname>_Cooldown].expiration.in_seconds.round_to[1]>s<&7>!"
      - queue clear
    }
    - define Class_Stat_Config s@<player.flag[Class]>_Stat_Config
    - foreach <def[Class_Stat_Config].yaml_key[Default_Skill_List]> {
      - if <context.item> == <def[value]> {
        - if <player.inventory.find[<context.item>]> == -1 {
          - inventory set origin:<context.item> slot:<player.inventory.find[i@Unassigned_Skill]>
          - inventory open d:in@<player.flag[Class]>_Skills_Menu
          - queue clear
        }
        else {
          - inventory set origin:i@Unassigned_Skill slot:<player.inventory.find[<context.item>]>
          - inventory open d:in@<player.flag[Class]>_Skills_Menu
          - queue clear
        }
      }
    }
    - if <yaml[<player.uuid>].read[<player.flag[Class]>.Skills.<context.item.scriptname.to_titlecase>]> == 0 {
      - inject Skill_Limit_Check
      - yaml id:<player.uuid> set <player.flag[Class]>.Skills.<context.item.scriptname.to_titlecase>:1
      - inventory set origin:<context.item> slot:<player.inventory.find[i@Unassigned_Skill]>
      - inventory open d:in@<player.flag[Class]>_Skills_Menu
    }
    else if <yaml[<player.uuid>].read[<player.flag[Class]>.Skills.<context.item.scriptname.to_titlecase>]> == 1 {
      - yaml id:<player.uuid> set <player.flag[Class]>.Skills.<context.item.scriptname.to_titlecase>:0
      - inventory set origin:i@Unassigned_Skill slot:<player.inventory.find[<context.item>]>
      - inventory open d:in@<player.flag[Class]>_Skills_Menu
    }
    else {
      - yaml id:<player.uuid> set <player.flag[Class]>.Skills.<context.item.scriptname.to_titlecase>:0
      - inject Skill_Limit_Check
      - yaml id:<player.uuid> set <player.flag[Class]>.Skills.<context.item.scriptname.to_titlecase>:1
      - inventory set origin:<context.item> slot:<player.inventory.find[i@Unassigned_Skill]>
      - inventory open d:in@<player.flag[Class]>_Skills_Menu
    }

Skill_Limit_Check:
  type: task
  debug: false
  speed: 0
  script:
    - foreach <yaml[<player.uuid>].list_keys[<player.flag[Class]>.Skills]> {
      - define Check 0
      - if <yaml[<player.uuid>].read[<player.flag[Class]>.Skills.<def[value]>]> == 1 {
        - define Check <def[Check].add[1]>
      }
    }
    - if <def[Check]> > 3 {
      - narrate "<&a><&l>[Class] <&7>You already have <&f>3 <&7>optional skills selected!"
      - queue clear
    }

Skill_Bar_Management:
  type: task
  debug: false
  speed: 0
  script:
    - yaml id:<player.uuid> set <player.flag[Class]>.Skill_Bar.Skills:<player.inventory.slot[1]>|<player.inventory.slot[2]>|<player.inventory.slot[3]>|<player.inventory.slot[4]>|<player.inventory.slot[5]>|<player.inventory.slot[6]>

Filler_Icon:
  type: item
  debug: false
  material: stained_glass_pane
  display name: <&6><&sp><&sp><&sp><&sp>Skill Bar
  lore:
  - <&e><&sp>-----------
  - <&a>Available Skills