Skillbar_Handler:
  type: world
  debug: false
  events:
    on player scrolls their hotbar:
    - if <player.gamemode.id> == 2 && <context.new_slot> <= 6 {
      - determine passively cancelled
      - if <yaml[<player.uuid>].read[General.Class]> !== Citizen {
        - if <context.previous_slot> <= 6 {
          - adjust <player> item_slot:7
        }
        - if <player.inventory.slot[<context.new_slot>]> == i@air {
          - inventory set origin:i@Unassigned_Skill slot:<context.new_slot>
          - queue clear
        }
        - foreach <player.inventory.slot[<context.new_slot>].lore> {
          - if <def[value]> contains Default Skill || <def[value]> contains Unassigned Skill || <def[value]> contains Optional Skill {
            - define Check true
          }
        }
        - if <player.inventory.slot[<context.new_slot>].scriptname> == Unassigned_Skill {
          - narrate "<&a><&l>[Skill] <&7>This skill has not been assigned yet!"
        }
        else if <def[Check]> == true {
          - define Skill <player.inventory.slot[<context.new_slot>].scriptname.to_titlecase>
          - define Skill_Slot <context.new_slot>
          - inject Cast_Sequence
        }
      }
    }
    on player clicks in inventory:
    - if <player.gamemode.id> == 2 && <context.slot> <= 6 {
      - foreach <context.item.lore> {
        - if <def[value]> contains Default Skill || <def[value]> contains Unassigned Skill || <def[value]> contains Optional Skill {
          - determine passively cancelled
        }
      }
    }

Cast_Sequence:
  type: task
  debug: false
  speed: 0
  script:
    - if <player.has_flag[Silence_Effect]> {
      - narrate "<&a><&l>[Skill] <&7>You are currently <&f>Silenced <&7>for another <&f><player.flag[Silence_Effect].expiration.in_seconds.round_to[1]>s<&7>!"
      - queue clear
    }
    - if <player.has_flag[Stun_Effect]> {
      - narrate "<&a><&l>[Skill] <&7>You are currently <&f>Stunned <&7>for another <&f><player.flag[Stun_Effect].expiration.in_seconds.round_to[1]>s<&7>!"
      - queue clear
    }
    - define Class_Skill_Config s@<yaml[<player.uuid>].read[General.Class]>_Skill_Config
    - define Class_Stat_Config s@<yaml[<player.uuid>].read[General.Class]>_Stat_Config
    - define Skill_Cooldown <def[Skill]>_Cooldown
    - define Skill_Cost <def[Class_Skill_Config].yaml_key[<def[Skill]>_Cost].as_int||0>
    - if <player.has_flag[<def[Skill_Cooldown]>]> {
      - narrate "<&a><&l>[Skill] <&f><def[Skill].replace[_].with[<&sp>].to_titlecase> <&7>has <&f><player.flag[<def[Skill_Cooldown]>].expiration.in_seconds.round_to[1]>s <&7>until it's ready!"
      - queue clear
    }
    - if <def[Skill_Cost]> > <yaml[<player.uuid>].read[General.Mana].as_int> {
      - narrate "<&a><&l>[Skill] <&7>You do not have enough <&f><def[Class_Stat_Config].yaml_key[Class_Resource]||Mana> <&7>to use this ability!"
      - queue clear
    }
    - inject <def[Skill]>_Cast
    - define Mana <yaml[<player.uuid>].read[General.Mana].as_int>
    - yaml id:<player.uuid> set General.Mana:<def[Mana].sub[<def[Skill_Cost]>]>
    - define Mana <def[Mana].sub[<def[Skill_Cost]>]>
    - adjust <player> fake_experience:<def[Mana].div[20]>|<def[Mana]>
    - if <def[Message]||true> != false {
        - define Message "<def[Class_Skill_Config].yaml_key[<def[Skill]>_Message]||<&a><&l>[Skill] <&f><player.name> <&7>has used <&f><def[Skill].replace[_].with[<&sp>].to_titlecase><&7>!>"
        - narrate "<parse:<def[Message]>>" targets:<player.location.find.players.within[25]>
    }
    - if <def[Multi_Cast]||false> == false {
      - flag player <def[Skill_Cooldown]> duration:<def[Class_Skill_Config].yaml_key[<def[Skill_Cooldown]>].as_int||10>
      - inject Cooldown_Manager
    }

Cooldown_Manager:
  type: task
  debug: false
  speed: 0
  script:
  - repeat <def[Class_Skill_Config].yaml_key[<def[Skill_Cooldown]>].as_int.mul[1.5]||15> {
    - if !<player.is_online> {
      - goto Offline_Skip
    }
    - if !<player.has_flag[<def[Skill_Cooldown]>]> {
      - inventory set origin:i@<def[Skill]> slot:<def[Skill_Slot]>
      - queue clear
    }
    - define Cooldown <player.flag[<def[Skill_Cooldown]>].expiration.in_seconds.round>
    - inventory set origin:i@<def[Skill]>[quantity=<player.flag[<def[Skill_Cooldown]>].expiration.in_seconds.round_up>] slot:<def[Skill_Slot]>
    - mark Offline_Skip
    - wait 0.75s
  }


Unassigned_Skill:
  type: item
  debug: false
  material: pumpkin_seeds
  display name: <&7>Unassigned
  lore:
  - <&f>Unassigned Skill