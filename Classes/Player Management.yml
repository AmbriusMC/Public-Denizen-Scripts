File_Manager:
  type: world
  debug: false
  events:
    on player login:
    - if <server.has_file[/Players/<player.uuid>.yml]> {
      - yaml "load:/Players/<player.uuid>.yml" id:<player.uuid>
      - yaml id:<player.uuid> set General.Damage_Modifier:1
    }
    else {
      - yaml create id:<player.uuid>
      - yaml id:<player.uuid> set General.Mana:0
      - yaml id:<player.uuid> set General.Name:<player.name>
    }
    on player quits:
    - yaml "savefile:/Players/<player.uuid>.yml" id:<player.uuid>
    - wait 30s
    - if !<player.is_online> {
      - yaml "savefile:/Players/<player.uuid>.yml" id:<player.uuid>
      - yaml unload id:<player.uuid>
    }
    on shutdown:
    - foreach <server.list_online_players> {
      - yaml "savefile:/Players/<def[value].uuid>.yml" id:<def[value].uuid>
    }
    on system minutely:
    - foreach <server.list_online_players> {
      - yaml "savefile:/Players/<player.uuid>.yml" id:<player.uuid>
    }

Class_Login_Handler:
  type: world
  debug: false
  events:
    on player logs in:
    - wait 1t
    - adjust <player> scale_health:true
    - define Class_Stat_Config s@<player.flag[Class]>_Stat_Config
    - yaml id:<player.uuid> set General.Mana:<def[Class_Stat_Config].yaml_key[Default_Mana]||0>
    - inject Skill_Bar_Setup
    - while <player.is_online> {
      - define Mana <yaml[<player.uuid>].read[General.Mana]>
      - adjust <player> fake_experience:<def[Mana].div[20]>|<def[Mana]>
      - if <player.flag[Class]||Citizen> == Berserker {
        - if <player.has_flag[Enraged]> {
          - define Enrage Active
        }
        else {
          - define Enrage Inactive
        }
        - sidebar set title:<&6><&l>Info<&co> "value:<&2><&l>Health<&co> <&f><player.health.as_int>|<&2><&l>Rage<&co> <&f><yaml[<player.uuid>].read[General.Mana].as_int||0>|<&2><&l>Enrage<&co> <&f><def[Enrage]>" "players:<player>" "increment:-1"
        - if !<player.has_flag[In_Combat]> {
          - if <def[Mana]> >= 1 {
            - yaml id:<player.uuid> set General.Mana:<def[Mana].sub[1]>
            - define Mana <def[Mana].sub[1]>
            - adjust <player> fake_experience:<def[Mana].div[20]>|<def[Mana]>
          }
          else if <def[Mana]> <= 1 {
            - yaml id:<player.uuid> set General.Mana:0
            - adjust <player> fake_experience:0.0|0
          }
        }
      }
      - wait 10t
    }

Gamemode_Handler:
  type: world
  debug: false
  events:
    on player changes gamemode:
    - inject Skill_Bar_Setup

Skill_Bar_Setup:
  type: task
  debug: false
  speed: 0
  script:
    - foreach '<player.inventory.list_contents.with_lore[Default Skill]>' {
      - take <def[value]> quantity:64
    }
    - foreach '<player.inventory.list_contents.with_lore[Optional Skill]>' {
      - take <def[value]> quantity:64
    }
    - foreach '<player.inventory.list_contents.with_lore[Unassigned Skill]>' {
      - take <def[value]> quantity:64
    }
    - wait 1t
    - if <player.gamemode.id> == 2 {
      - if <player.flag[Class]> == Citizen {
          - queue clear
      }
      - if <yaml[<player.uuid>].contains[<player.flag[Class]>.Skill_Bar.Skills]> {
        - define Slot 1
        - foreach <yaml[<player.uuid>].read[<player.flag[Class]>.Skill_Bar.Skills]> {
          - if <def[Value].scriptname> matches script {
            - inventory set origin:<def[Value]>[quantity=1] slot:<def[Slot]>
          }
          else {
            - inventory set origin:i@Unassigned_Skill[quantity=1] slot:<def[Slot]>
          }
          - define Slot <def[Slot].add[1]>
        }
      }
      else {
        - define Slot 1
        - define Stat_Config s@<player.flag[Class]>_Stat_Config
        - foreach <def[Stat_Config].yaml_key[Default_Skill_List]> {
          - inventory set origin:<def[value]> slot:<def[Slot]>
          - define Slot <def[Slot].add[1]>
        }
        - inventory set origin:i@Unassigned_Skill slot:4
        - inventory set origin:i@Unassigned_Skill slot:5
        - inventory set origin:i@Unassigned_Skill slot:6
      }
    }